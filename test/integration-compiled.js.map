{"version":3,"sources":["integration.js"],"names":[],"mappings":"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","file":"integration-compiled.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"../src/index\" />\n\"use strict\";\nimport { RepliqServer as Server, RepliqClient as Client } from \"../src/index\";\nimport * as http from \"http\";\nimport * as ioClient from \"socket.io-client\";\nimport * as ioServer from \"socket.io\";\nimport * as should from \"should\";\ndescribe(\"Repliq\", () => {\n    let host = \"http://localhost:3000\";\n    let port = 3000;\n    describe(\"Server\", () => {\n        //var server: Server;\n        function ioConnector(server, done) {\n            let c = ioClient(host, { forceNew: true });\n            c.on('connect', () => { server.stop(); c.close(); done(); });\n        }\n        describe(\"#constructor(url: string)\", () => {\n            it(\"should start an io and http server\", (done) => {\n                let server = new Server(3000);\n                ioConnector(server, done);\n            });\n        });\n        describe(\"#constructor(httpServer: http.Server)\", () => {\n            it(\"start an io server on given http server\", (done) => {\n                let app = http.createServer();\n                let serv = new Server(app);\n                ioConnector(serv, done);\n                app.listen(3000);\n            });\n        });\n    });\n    describe(\"Client\", () => {\n        let server;\n        let api = {\n            noargs: function () { },\n            witharg: function (x) { },\n            withreturn: function () { return 2; },\n            withargreturn: function (x) { return x * 2; },\n            identity: function (x) { return x; }\n        };\n        describe(\"#constructor(url: string)\", () => {\n            it(\"should start an io client and connect to given host\", (done) => {\n                let s = ioServer(3000);\n                var client = new Client(host);\n                s.on(\"connection\", () => { s.close(); client.stop(); done(); });\n            });\n        });\n        describe(\"#send(selector: string, args: Object[])\", () => {\n            describe(\"no arguments, no return\", () => {\n                it(\"should resolve the promise\", (done) => {\n                    let server = new Server(port);\n                    server.export(api);\n                    var client = new Client(host);\n                    client.send(\"noargs\").then((result) => { server.stop(); client.stop(); done(); });\n                });\n            });\n            describe(\"no arguments, return value\", () => {\n                it(\"should resolve the promise with the return value\", (done) => {\n                    let server = new Server(port);\n                    server.export(api);\n                    var client = new Client(host);\n                    client.send(\"withreturn\").then((result) => {\n                        should.equal(result, 2);\n                        server.stop();\n                        client.stop();\n                        done();\n                    });\n                });\n            });\n            describe(\"arguments, no return\", () => {\n                it(\"should resolve the promise\", (done) => {\n                    let server = new Server(port);\n                    server.export(api);\n                    var client = new Client(host);\n                    client.send(\"witharg\", 2).then((result) => { server.stop(); client.stop(); done(); });\n                });\n            });\n            describe(\"arguments, return\", () => {\n                it(\"should resolve the promise\", (done) => {\n                    let server = new Server(port);\n                    server.export(api);\n                    var client = new Client(host);\n                    client.send(\"withargreturn\", 2).then((result) => {\n                        should.equal(result, 4);\n                        server.stop();\n                        client.stop();\n                        done();\n                    });\n                });\n            });\n        });\n    });\n    describe(\"Argument Serialization\", () => {\n        let server;\n        let client;\n        before(() => {\n            server = new Server(port);\n            client = new Client(host);\n            server.export({ identity: function (x) { return x; } });\n        });\n        after(() => {\n            server.stop();\n            client.stop();\n        });\n        function sendToServerAndBack(arg, fn) {\n            it(\"should be (de)serialized\", (done) => {\n                client.send(\"identity\", arg).then((res) => {\n                    fn(res);\n                    done();\n                });\n            });\n        }\n        describe(\"number\", () => {\n            sendToServerAndBack(2, (res) => {\n                should.equal(res, 2);\n            });\n        });\n        describe(\"string\", () => {\n            sendToServerAndBack(\"foo\", (res) => {\n                should.equal(res, \"foo\");\n            });\n        });\n        describe(\"array\", () => {\n            let arr = [1, 2, 3];\n            sendToServerAndBack(arr, (res) => {\n                should.deepEqual(arr, res);\n            });\n        });\n        describe(\"object\", () => {\n            let obj = {\n                foo: 1,\n                bar: \"2\"\n            };\n            sendToServerAndBack(obj, (res) => {\n                should.deepEqual(res, obj);\n            });\n        });\n    });\n});\n//# sourceMappingURL=integration.js.map"]}