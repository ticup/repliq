{"version":3,"sources":["RepliqServer.js"],"names":[],"mappings":";;;;;;;;;;;;IAEY,KAAK;;;;IACL,EAAE;;;;IACF,GAAG;;;;;;;;AAEf,IAAI,KAAK,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC;;IAC1B,YAAY,WAAZ,YAAY;AACrB,aADS,YAAY,CACT,GAAG,EAAE;;;8BADR,YAAY;;AAEjB,YAAI,CAAC,OAAO,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;AACvB,YAAI,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,MAAM,EAAK;AACnC,iBAAK,CAAC,kBAAkB,CAAC,CAAC;AAC1B,kBAAM,CAAC,EAAE,CAAC,KAAK,EAAE,UAAC,GAAG,EAAE,KAAK,EAAK;AAC7B,sBAAK,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACjD,CAAC,CAAC;SACN,CAAC,CAAC;AACH,YAAI,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,MAAM,EAAK;AACtC,iBAAK,CAAC,qBAAqB,CAAC,CAAC;SAChC,CAAC,CAAC;AACH,YAAI,CAAC,OAAO,CAAC,EAAE,CAAC,WAAW,EAAE,UAAC,MAAM,EAAK;AACrC,iBAAK,CAAC,oBAAoB,CAAC,CAAC;SAC/B,CAAC,CAAC;AACH,YAAI,CAAC,SAAS,GAAG,eAjBhB,SAAS,EAiBsB,CAAC;KACpC;;iBAhBQ,YAAY;;kCAiBX,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;AAC9B,iBAAK,CAAC,eAAe,GAAG,QAAQ,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,CAAC,CAAC;AACtD,gBAAI,CAAC,IAAI,CAAC,GAAG,EAAE;AACX,uBAAO,KAAK,CAAC,iBAAiB,CAAC,CAAC;aACnC;AACD,gBAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACjC,gBAAI,CAAC,OAAO,EAAE;AACV,uBAAO,KAAK,CAAC,6BAA6B,GAAG,QAAQ,CAAC,CAAC;aAC1D;AACD,gBAAI,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACtC,gBAAI,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC3C,iBAAK,CAAC,kBAAkB,GAAG,MAAM,CAAC,CAAC;AACnC,iBAAK,CAAC,IAAI,EAAE,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;SACtC;;;oCACW;AACR,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK,EAC/B,CAAC,CAAC;SACN;;;+BACM;AACH,gBAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SACxB;;;gCACM,GAAG,EAAE;AACR,gBAAI,IAAI,CAAC,GAAG,EAAE;AACV,sBAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACrD;AACD,gBAAI,CAAC,GAAG,GAAG,GAAG,CAAC;SAClB;;;WA3CQ,YAAY","file":"RepliqServer-compiled.js","sourcesContent":["/// <reference path=\"../../typings/tsd.d.ts\" />\n/// <reference path=\"../shared/Communication.ts\" />\nimport * as Debug from \"debug\";\nimport * as io from \"socket.io\";\nimport * as com from \"../shared/Communication\";\nimport { Listeners } from \"./Listeners\";\nlet debug = Debug(\"Repliq:com:server\");\nexport class RepliqServer {\n    constructor(app) {\n        this.channel = io(app);\n        this.channel.on(\"connect\", (socket) => {\n            debug(\"client connected\");\n            socket.on(\"rpc\", (rpc, reply) => {\n                this.handleRpc(rpc.selector, rpc.args, reply);\n            });\n        });\n        this.channel.on(\"disconnect\", (socket) => {\n            debug(\"client disconnected\");\n        });\n        this.channel.on(\"reconnect\", (socket) => {\n            debug(\"client reconnected\");\n        });\n        this.listeners = new Listeners();\n    }\n    handleRpc(selector, sargs, reply) {\n        debug(\"received rpc \" + selector + \"(\" + sargs + \")\");\n        if (!this.api) {\n            return reply(\"No exported API\");\n        }\n        let handler = this.api[selector];\n        if (!handler) {\n            return reply(\"No compatible function for \" + selector);\n        }\n        let args = sargs.map(com.deserialize);\n        let result = handler.apply(this.api, args);\n        debug(\"result for rpc: \" + result);\n        reply(null, com.serialize(result));\n    }\n    onConnect() {\n        return new Promise((resolve) => {\n        });\n    }\n    stop() {\n        this.channel.close();\n    }\n    export(api) {\n        if (this.api) {\n            throw new Error(\"Cannot export multiple objects\");\n        }\n        this.api = api;\n    }\n}\n//# sourceMappingURL=RepliqServer.js.map"]}