{"version":3,"sources":["Communication.js"],"names":[],"mappings":";;;;;QAEgB,aAAa,GAAb,aAAa;QAGb,SAAS,GAAT,SAAS;QAqBT,WAAW,GAAX,WAAW;;;;;;AAxBpB,SAAS,aAAa,CAAC,IAAI,EAAE;AAChC,WAAO,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;CAC9B;AACM,SAAS,SAAS,CAAC,GAAG,EAAE;AAC3B,QAAI,IAAI,UAAU,GAAG,yCAAH,GAAG,CAAA,CAAC;AACtB,QAAI,IAAI,KAAK,QAAQ,EAAE;AACnB,eAAO,EAAE,GAAG,EAAH,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;KAClC;AACD,QAAI,IAAI,KAAK,QAAQ,EAAE;AACnB,eAAO,EAAE,GAAG,EAAH,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;KAClC;AACD,QAAI,IAAI,KAAK,OAAO,EAAE;AAClB,eAAO,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;KACrD;AACD,QAAI,IAAI,KAAK,QAAQ,EAAE;AACnB,YAAI,GAAG,oBAhBN,MAAM,AAgBkB,EAAE;AACvB,gBAAI,GAAG,GAAG,EAAE,CAAC;AACb,eAAG,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,UAAC,GAAG;uBAAK,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC;aAAA,CAAC,CAAC;AACjE,mBAAO,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;SACvC;AACD,eAAO,EAAE,GAAG,EAAH,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;KAClC;AACD,UAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,GAAG,CAAC,CAAC;CACpD;AACM,SAAS,WAAW,OAAgB;QAAb,GAAG,QAAH,GAAG;QAAE,IAAI,QAAJ,IAAI;;AACnC,QAAI,AAAC,IAAI,KAAK,QAAQ,IAAM,IAAI,KAAK,QAAQ,AAAC,EAAE;AAC5C,eAAO,GAAG,CAAC;KACd;AACD,QAAI,IAAI,KAAK,OAAO,EAAE;AAClB,eAAO,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;KAC/B;AACD,QAAI,IAAI,KAAK,QAAQ,EAAE;AACnB,aAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AACjB,eAAG,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;SACpC;AACD,eAAO,GAAG,CAAC;KACd;AACD,QAAI,IAAI,KAAK,QAAQ,EAAE;AACnB,aAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AACjB,eAAG,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;SACpC;AACD,eAAO,YA1CE,YAAY,EA0CD,GAAG,CAAC,CAAC;KAC5B;AACD,UAAM,IAAI,KAAK,CAAC,yBAAyB,GAAG,GAAG,CAAC,CAAC;CACpD;;AAAA","file":"Communication-compiled.js","sourcesContent":["///<reference path=\"./Repliq\" />\nimport { Repliq, defineRepliq } from \"./Repliq\";\nexport function serializeArgs(args) {\n    return args.map(serialize);\n}\nexport function serialize(val) {\n    let type = typeof val;\n    if (type === \"number\") {\n        return { val, type: \"number\" };\n    }\n    if (type === \"string\") {\n        return { val, type: \"string\" };\n    }\n    if (type === \"Array\") {\n        return { val: val.map(serialize), type: \"Array\" };\n    }\n    if (type === \"Object\") {\n        if (val instanceof Repliq) {\n            var obj = {};\n            val.commitKeys().forEach((key) => obj[key] = val.getCommit(key));\n            return { val: obj, type: \"Repliq\" };\n        }\n        return { val, type: \"Object\" };\n    }\n    throw new Error(\"unknown serialize value\" + val);\n}\nexport function deserialize({ val, type }) {\n    if ((type === \"number\") || (type === \"string\")) {\n        return val;\n    }\n    if (type === \"Array\") {\n        return val.map(deserialize);\n    }\n    if (type === \"Object\") {\n        for (let key in val) {\n            val[key] = deserialize(val[key]);\n        }\n        return val;\n    }\n    if (type === \"Repliq\") {\n        for (let key in val) {\n            val[key] = deserialize(val[key]);\n        }\n        return defineRepliq(val);\n    }\n    throw new Error(\"unknown serialize value\" + val);\n}\n//# sourceMappingURL=Communication.js.map"]}