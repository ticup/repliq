{"version":3,"sources":["RepliqClient.js"],"names":[],"mappings":";;;;;;;;;;;;;IAGY,KAAK;;;;IACL,EAAE;;;;IACF,GAAG;;;;;;AACf,IAAI,KAAK,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC;;IAC1B,YAAY,WAAZ,YAAY;AACrB,aADS,YAAY,CACT,IAAI,EAAE;8BADT,YAAY;;AAEjB,YAAI,CAAC,OAAO,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;KAC/C;;iBAHQ,YAAY;;oCAIT;;;AACR,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK;AAC5B,sBAAK,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,YAAM;AAC7B,yBAAK,CAAC,kBAAkB,CAAC,CAAC;AAC1B,2BAAO,CAAC,IAAI,CAAC,CAAC;iBACjB,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;;6BACI,QAAQ,EAAW;;;8CAAN,IAAI;AAAJ,oBAAI;;;AAClB,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,oBAAI,GAAG,GAAG,EAAE,QAAQ,EAAR,QAAQ,EAAE,IAAI,EAAJ,IAAI,EAAE,CAAC;AAC7B,qBAAK,CAAC,cAAc,GAAG,QAAQ,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;AACpD,uBAAK,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM,EAAK;AAC7C,wBAAI,GAAG,GAAG,MAAM,CAAC;AACjB,yBAAK,CAAC,0BAA0B,GAAG,QAAQ,GAAG,GAAG,GAAG,IAAI,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC;AAC5E,wBAAI,KAAK,EACL,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;AACzB,2BAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;iBACjC,CAAC,CAAC;aACN,CAAC,CAAC;SACN;;;+BACM;AACH,gBAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SACxB;;;WA3BQ,YAAY","file":"RepliqClient-compiled.js","sourcesContent":["/// <reference path=\"../../typings/tsd.d.ts\" />\n/// <reference path=\"../shared/Communication\" />\n/// <reference path=\"../shared/Repliq\" />\nimport * as Debug from \"debug\";\nimport * as io from 'socket.io-client';\nimport * as com from \"../shared/Communication\";\nlet debug = Debug(\"Repliq:com:client\");\nexport class RepliqClient {\n    constructor(host) {\n        this.channel = io(host, { forceNew: true });\n    }\n    onConnect() {\n        return new Promise((resolve) => {\n            this.channel.on(\"connect\", () => {\n                debug(\"client connected\");\n                resolve(true);\n            });\n        });\n    }\n    send(selector, ...args) {\n        return new Promise((resolve, reject) => {\n            let rpc = { selector, args };\n            debug(\"sending rpc \" + selector + \"(\" + args + \")\");\n            this.channel.emit(\"rpc\", rpc, (error, result) => {\n                let ser = result;\n                debug(\"received rpc result for \" + selector + \"(\" + args + \") : \" + result);\n                if (error)\n                    return reject(error);\n                resolve(com.deserialize(ser));\n            });\n        });\n    }\n    stop() {\n        this.channel.close();\n    }\n}\n//# sourceMappingURL=RepliqClient.js.map"]}